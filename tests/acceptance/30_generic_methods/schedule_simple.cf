#######################################################
#
# Test the simple generic scheduler
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$#this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
}

#######################################################

# Bundle all tests into this one
bundle agent test
{
  methods:
    any::

      # 01/01/01 is a monday
      #                                 id       date     time    splay       ag_p sp_m  sp_h min  hrs  dow  p_m  p_h  p_d  mode  cid  rid   err
      "any" usebundle => schedule_test("test1", "01/01/01 00:01", "89478486", "3", "30", "0", "0", "0", "1", "3",  "0", "0", "",   "", "",   "ko");
      "any" usebundle => schedule_test("test2", "01/01/01 00:01", "89478486", "0", "10", "0", "0", "0", "1", "3",  "0", "0", "",   "", "",   "ko");
      "any" usebundle => schedule_test("test3", "01/01/01 00:01", "89478486", "9", "10", "0", "0", "0", "1", "3",  "0", "0", "",   "", "",   "ko");
      "any" usebundle => schedule_test("test4", "01/01/01 00:01", "89478486", "3", "10", "0", "0", "0", "1", "30", "0", "0", "",   "0", "1", "ok");
      "any" usebundle => schedule_test("test5", "01/01/01 00:04", "89478486", "3", "10", "0", "0", "0", "1", "30", "0", "0", "",   "1", "1", "ok");
      "any" usebundle => schedule_test("test6", "01/01/01 00:01", "89478486", "3", "10", "0", "0", "0", "1", "30", "0", "1", "",   "1", "1", "ok");

}

#######################################################

bundle agent check
{
  classes:
    "ok" expression => "!global_error";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

# A simple scheduler test
# parameters are the scheduler parameter plus :
#  - test_id: a unique id for the test
#  - test_now: the current date to use for the test
#  - exp_current_run: expected value of current_run
#  - exp_run: expected value of the job run id
#  - exp_error: "ko" i we expect an error and "ok" otherwise 
bundle agent schedule_test(test_id, test_now, test_splay, agent_periodicity, delay_minutes, delay_hours,
                           start_on_minutes, start_on_hours, start_on_day_of_week,
                           periodicity_minutes, periodicity_hours, periodicity_days, mode,
                           exp_current_run, exp_run, exp_error)
{
  vars:
    any::
      "date" string => execresult("date --date='${test_now}' +%s", "useshell");

  classes:
    pass2::
      "ok_run" expression => strcmp("${exp_current_run}", "${schedule_generic.current_run_id}");
      "ok_job" expression => strcmp("${exp_run}", "${schedule_generic.job_run_id}");
      "expect_error" expression => strcmp("${exp_error}", "ko");
    pass2.expect_error::
      "ok_error" expression => "job_${test_id}_error";
    pass2.!expect_error::
      "ok_error" expression => "!job_${test_id}_error";

    pass2::
      "global_error" expression => "(expect_error.!ok_error)|(!expect_error.(!ok_run|!ok_job|!ok_error))",
                     scope => "namespace";

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "any";

  methods:
    "date"  usebundle => ncf_date("${date}");
    "splay" usebundle => ncf_splay("${test_splay}");
    "test"  usebundle => schedule_simple("${test_id}", "${agent_periodicity}", "${delay_minutes}", "${delay_hours}",
                                         "${start_on_minutes}", "${start_on_hours}", "${start_on_day_of_week}",
                                         "${periodicity_minutes}", "${periodicity_hours}", "${periodicity_days}", "${mode}");

  reports:
#    any::
#      "-- test -- ${test_id}";
#      " prefix ${schedule_generic.test}";
#      " timestamp = ${date.timestamp}";
#      " splay_dec = ${splay.splay_dec}";
#      " run_shift = ${schedule_generic.run_shift}";
#      " max_run_id = ${schedule_generic.max_run_id}";
#      " run_id = ${schedule_generic.job_run_id}";
#      " elapsed = ${schedule_generic.elapsed}";
#      " current_run_id = ${schedule_generic.current_run_id}";
#
#      " splay = ${schedule_simple_generic.splay}";
#      " periodicity = ${schedule_simple_generic.job_periodicity}";
#      " now = ${schedule_simple_generic.now}";
#
#      " error_null_agent_periodicity" ifvarclass => "job_${test_id}_error_null_agent_periodicity";
#      " error_interval_too_big" ifvarclass => "job_${test_id}_error_splay_too_big";
#      " error_interval_too_small" ifvarclass => "job_${test_id}_error_splay_too_small";
#      " Error !" ifvarclass => "job_{test_id}_error";
#      " Must RUN !" ifvarclass => "job_${test_id}_run";
#      " After run ${test_id}!" ifvarclass => "job_${test_id}_after_run";
#      " After splay ${test_id}!" ifvarclass => "job_${test_id}_after_splay";

    # test expectations from parameters
    pass3.expect_error.ok_error:: # we expect an error and got one
      "TEST result OK ${test_id}";
    pass3.expect_error.!ok_error::
      "TEST result ERROR ${test_id}: error ${test_id}_error false";
    pass3.!expect_error.ok_run.ok_job.ok_error::
      "TEST result OK ${test_id}"; # we expected no error and got the correct result
    pass3.!expect_error.!ok_run::
      "TEST result ERROR ${test_id}: current_run ${schedule_generic.current_run_id} != ${exp_current_run}";
    pass3.!expect_error.!ok_job::
      "TEST result ERROR ${test_id}: run ${schedule_generic.run_id} != ${exp_run}";
    pass3.!expect_error.!ok_error::
      "TEST result ERROR ${test_id}: error ${test_id}_error true";
}

