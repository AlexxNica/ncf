#######################################################
#
# Test if cf-serverd is started and if no, start it
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "service_name"  string => "cf-serverd";
    # here we don't use the full path to support multiple version of agent
    # plus, the check on the path is not anchored, ensuring that it will
    # find the right process
    "service_path"  string => "/bin/cf-serverd";
    "cservice_name" string => canonify("${service_name}");
    "cservice_path" string => canonify("${service_path}");
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => service_ensure_running_path("${init.service_name}", "${init.service_path}");
}

#######################################################

bundle agent check
{
  classes:
    "ok" expression => "service_ensure_running_${init.cservice_name}_ok.!service_ensure_running_${init.cservice_name}_error";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
