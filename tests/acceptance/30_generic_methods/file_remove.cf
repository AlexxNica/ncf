#######################################################
#
# Test checking that file_remove removes a file
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"                    string => getenv("TEMP", 1024);
    "destination_file"       string => "${tmp}/remove_test";
    "destination_file_canon" string => canonify("${destination_file}");

  files:
    "${destination_file}"
      create => "true";

}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => file_remove("${init.destination_file}");
}

#######################################################

bundle agent check
{
  classes:
    "file_exists"      expression => fileexists("${init.destination_file}");

    "ok"                   expression => "!file_exists.file_remove_${init.destination_file_canon}_repaired.!file_remove_${init.destination_file_canon}_error";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    file_exists::
      "File ${init.destination_file} exists even though it should have been removed!";
}
