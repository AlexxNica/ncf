#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

#########################################################################################################
# Service Management
#########################################################################################################
# This files contains bundles to make sure that services are running or stopped, and 
# to reload service on request.
#
# It contains six bundles:
# - service_start:          Start a service
# - service_start_command:  Start a service, with a non standard start command 
# - service_stop:           Stop a service
# - service_stop_command:   Stop a service, with a non standard start command 
# - service_reload:         Reload a service
# - service_reload_command: Reload a service, with a non standard reload command 
#
# Please take a look at the corresponding bundles for extended usage details
#########################################################################################################


#########################################################################################################
# service_start: Make sure a service is running
# Contract:
#  - Args:
#    -- "service_name", the name of the service 
#    -- "service_path", the path of the service
#  - Assumes
#    -- The init script to start the service is /etc/init.d/${service_name}
#    -- The path to the service is used to detect if the service is running in 
#       ps command
#  - Returns: defines a service_start_${service_name}_{kept,repaired,ok,not_ok,reached}
# Usage example:
# methods:
#       "any" usebundle => service_start("nrpe", "nrpe");
#########################################################################################################

bundle agent service_start(service_name, service_path)
{
  methods:
    "service_start" usebundle => service_start_command("${service_name}", "${service_path}", "/etc/init.d/${service_name} start");
}

#########################################################################################################
# service_start_command: Make sure a service is running, with a specific start command
# Contract:
#  - Args:
#    -- "service_name", the name of the service 
#    -- "service_path", the path of the service
#    -- "start_command", the command to start the service
#  - Assumes
#    -- The path to the service is used to detect if the service is running in 
#       ps command
#  - Returns: defines a service_start_${service_name}_{kept,repaired,ok,not_ok,reached}
# Usage example:
# methods:
#       "any" usebundle => service_start("autofs", "autofs", "/sbin/service autofs start");
#########################################################################################################
bundle agent service_start_command(service_name, service_path, start_command)
{
  vars: 
      "class_prefix" string  => canonify("service_start_${service_name}");
      "cservice_path" string => canonify("${service_path}");

  processes:
      "service_path"
        restart_class => "${cservice_path}_restart_class",
        classes       => classes_generic("${class_prefix}");


  commands:
      "${start_command}"
        ifvarclass => "${cservice_path}_restart_class",
        classes    => classes_generic("${class_prefix}");

  methods:
      "report"
        usebundle  => logger("${this.promise_filename}", "Starting service ${service_name} with command ${start_command}", "${class_prefix}_start"),
        ifvarclass => "${class_prefix}_reached";
}

#########################################################################################################
# service_reload: Reload a service (for instance after a configuration modification)
# Contract:
#  - Args:
#    -- "service_name", the name of the service 
#  - Assumes
#    -- The init script to start the service is /etc/init.d/${service_name}
#  - Returns: defines a service_reload_${service_name}_{kept,repaired,ok,inot_ok,reached}
# Usage example:
# methods:
#       "any" usebundle => service_reload("nrpe", "nrpe");
#########################################################################################################

bundle agent service_reload(service_name)
{
  methods:
    "service_reload" usebundle => service_reload_command("${service_name}", "/etc/init.d/${service_name} reload");
}
#########################################################################################################
# service_reload: Reload a service (for instance after a configuration modification), with a specific
# reload command
# Contract:
#  - Args:
#    -- "service_name", the name of the service 
#    -- "reload_command", the command to start the service
#  - Assumes
#  - Returns: defines a service_reload_${service_name}_{kept,repaired,ok,not_ok,reached}
# Usage example:
# methods:
#       "any" usebundle => service_reload_command("postgres", "/etc/init.d/postgresql reload");
#########################################################################################################

bundle agent service_reload_command(service_name, reload_command)
{
  vars:
      "class_prefix" string  => canonify("service_reload_${service_name}");

  commands:
      "${reload_command}"
        classes    => classes_generic("${class_prefix}");

  methods:
      "report_reload"
        usebundle  => logger("${this.promise_filename}", "Reloading service ${service_name} with command ${reload_command}", "${class_prefix}"),
        ifvarclass => "${class_prefix}_reached";

}
#########################################################################################################
# service_stop: Make sure a service is not running
# Contract:
#  - Args:
#    -- "service_name", the name of the service 
#  - Assumes
#    -- The init script to start the service is /etc/init.d/${service_name}
#  - Returns: defines a service_stop_${service_name}_{kept,repaired,ok,not_ok,reached}
# Usage example:
# methods:
#       "any" usebundle => service_stop("mdmonitor");
#########################################################################################################

bundle agent service_stop(service_name)
{
  methods:
    "service_stop" usebundle => service_stop_command("${service_name}", "/etc/init.d/${service_name} stop");
}
#########################################################################################################
# service_stop: Make sure a service is not running, with a specific stop command
# Contract:
#  - Args:
#    -- "service_name", the name of the service 
#    -- "reload_command", the command to stop the service
#  - Assumes
#  - Returns: defines a service_stop_${service_name}_{kept,repaired,ok,not_ok,reached}
# Usage example:
# methods:
#       "any" usebundle => service_stop("memcached", "/sbin/services memcached stop");
#########################################################################################################

bundle agent service_stop_command(service_name, stop_command)
{
  vars:
      "class_prefix" string  => canonify("service_stop_${service_name}");

  commands:
      "${stop_command}"
        classes    => classes_generic("${class_prefix}");

  methods:
      "report_reload"
        usebundle  => logger("${this.promise_filename}", "Stoping service ${service_name} with command ${stop_command}", "${class_prefix}"),
        ifvarclass => "${class_prefix}_reached";

}

