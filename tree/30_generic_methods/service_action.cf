#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service action
# @description Trigger an action on a service using tools like systemctl, service, init.d, Windows...
#
# @parameter service_name Service
# @parameter action Action to trigger on the service (start, stop, restart, reload, ...)
# 
# @class_prefix service_action
# @class_parameter service_name

bundle agent service_action(service_name, action)
{
  vars:

      "canonified_service_name"   string => canonify("${service_name}");
      "canonified_action" string => canonify("${action}");

      "old_class_prefix"          string => "service_action_${canonified_service_name}";
      "promisers"                 slist  => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"              string => canonify(join("_", "promisers"));
      "args"                      slist  => { "${service_name}", "${action}" };

  methods:

      "action"                 usebundle => ncf_services("${service_name}", "${action}");

      "class copy"             usebundle => _classes_copy("ncf_services_${canonified_service_name}_${canonified_action}", "${old_class_prefix}"),
                              ifvarclass => "ncf_services_${canonified_service_name}_${canonified_action}_reached";
      "new result classes"     usebundle => _classes_copy("${class_prefix}_action", "${class_prefix}"),
                              ifvarclass => "${class_prefix}_action_reached";

      "report"                 usebundle => _log("Run action ${action} on service ${service_name}", "${old_class_prefix}", "${class_prefix}", @{args}),
                              ifvarclass => "(!has_promiser_stack.${old_class_prefix}_reached)|(has_promiser_stack.${class_prefix}_reached)";
}
