#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Logger for Rudder
# @description Logging output for Rudder reports
#
# @parameter message      The common part of the message to display
# @parameter class_prefix The prefix of the class for different states
#
# @class_prefix    logger_rudder
# @class_parameter class_prefix
# The three states are kept, repaired and not_ok
# (as defined in the classes_generic of the cfengine_stdlib)

bundle agent logger_rudder(message, class_prefix)
{
  vars:

      "log_canonification_tool" string => '/bin/cat "${expected_reports_temp}" | while read line; do if echo "${line}" | grep -E "^\s*#" > /dev/null; then echo "${line}"; continue; fi; canonified=$(echo "${line}" | cut -d";" -f3 | sed "s/[^a-zA-Z0-9_]/_/g"); echo ${line} | sed -r "s/([^;]+);;[^;]+;;(.*)$/\1;;${canonified};;\2/"; done > ${expected_reports_file}';

      "expected_reports_source" string => "${sys.workdir}/inputs/rudder_expected_reports.csv";
      "expected_reports_temp"   string => "${expected_reports_source}.tmp";
      "expected_reports_file"   string => "${expected_reports_source}.res";

    (logger_rudder_final_resfile_repaired|logger_rudder_temp_resfile_kept)::

      # 3/ Once the final expected reports file has been expanded, read in our array
      "number_lines"
        int        => getfields("^[^;]*;;${class_prefix};;.*", "${expected_reports_file}", ";;", "report_data"),
        classes    => if_ok("report_data_read");

  files:

      # 1/ First, check if the temporary file needs to be updated (The Rudder
      # provided expected reports file has changed). If so, expand the variables
      # in it into a temporary file.
      "${expected_reports_temp}"
        create        => "true",
        edit_template => "${expected_reports_source}",
        classes       => classes_generic("logger_rudder_temp_resfile");

  commands:

    logger_rudder_temp_resfile_repaired::

      # 2/ If the temporary file has been updated, trigger this command to canonify all the values in
      # it.
      "${log_canonification_tool}"
        contain       => in_shell,
        classes       => classes_generic("logger_rudder_final_resfile");

  reports:

    report_data_read::

      # 4/ Array is ready, reporting time !!!
      "@@${report_data[1]}@@result_success@@${report_data[3]}@@${report_data[4]}@@${report_data[5]}@@${g.execRun}##${g.uuid}@#${message}"
        ifvarclass => "${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error",
        classes    => classes_generic("logger_rudder_${class_prefix}");

      "@@${report_data[1]}@@result_repaired@@${report_data[3]}@@${report_data[4]}@@${report_data[5]}@@${g.execRun}##${g.uuid}@#${message}"
        ifvarclass => "${class_prefix}_repaired.!${class_prefix}_error",
        classes    => classes_generic("logger_rudder_${class_prefix}");

      "@@${report_data[1]}@@result_error@@${report_data[3]}@@${report_data[4]}@@${report_data[5]}@@${g.execRun}##${g.uuid}@#${message}"
        ifvarclass => "${class_prefix}_error",
        classes    => classes_generic("logger_rudder_${class_prefix}");

}
