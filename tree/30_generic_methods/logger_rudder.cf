#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Logger for Rudder
# @description Logging output for Rudder reports
#
# @parameter message      The common part of the message to display
# @parameter class_prefix The prefix of the class for different states
#
# @class_prefix    logger_rudder
# @class_parameter class_prefix

bundle agent logger_rudder(message, class_prefix)
{
  # The different files used for reporting are:
  # * expected_reports_source: part of the promises, generated on the server
  # * expected_reports_temp: temporary file templated from expected_reports_source
  # * expected_reports_file: final file, generated from the content of expected_reports_temp
  #
  # The general workflow during the first call to logger_rudder of each run is:
  # 1/ Read the report file present in the promises (expected_reports_source),
  #    and expand it into the temporary report file (expected_reports_temp)
  # 2/ Read the content of the temporary file into a variable (reports)
  # 3/ Using the content of the read variable, write the content of the final file
  # 4/ Read the content of the final file into another variable (report_data), and use it for actual reporting
  #
  # The workflow for the other calls is only:
  #  4/ Read the content of the final file into another variable (report_data), and use it for actual reporting

  vars:

      "expected_reports_source" string => "${sys.workdir}/inputs/rudder_expected_reports.csv";
      "expected_reports_destination" string => "${sys.workdir}/state/rudder_expected_reports.${this.promiser_pid}.csv";
      # We put those files into the state directory to avoid purging them during each update
      # (which would break the current run's reporting).
      # We add the PID to the file name to be able to handle cuncurrent agent runs with separate expected reports
      "expected_reports_temp"   string => "${expected_reports_destination}.tmp";
      "expected_reports_file"   string => "${expected_reports_destination}.res";

 
    logger_rudder_final_resfile_repaired::
      "c_class_prefix" string => canonify("${class_prefix}");

      # 4/ Once the final expected reports file has been expanded, read in our array
      "number_lines"
        int        => getfields("^${current_technique_report_info.technique_name};;${c_class_prefix};;.*", "${expected_reports_file}", ";;", "report_data");

  classes:
    logger_rudder_final_resfile_repaired::
      "report_data_read" expression => isgreaterthan("${number_lines}","0");

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";


  methods:
    !logger_rudder_final_resfile_repaired::
      # If res file is not created, generate it
      "any" usebundle => _create_current_expected_reports_file;

    # no need to avoid normal ordering since this class is set when report is ready
    report_data_read::

      # 4/ Array is ready, reporting time !!!
      "any" usebundle => _rudder_common_reports_generic("${report_data[1]}", "${c_class_prefix}", "${report_data[3]}", "${report_data[4]}", "${report_data[5]}", "${message}"),
        classes    => classes_generic("logger_rudder_${c_class_prefix}");

}


# This bundle will create the expected reports files (tmp and res)
# it is supposed to be called once by logger_rudder, to generate the data
bundle agent _create_current_expected_reports_file {
  vars:

    logger_rudder_temp_resfile_repaired::
      # 2/ If the temporary file has been created, read temp file to get all values in an array, and canonify the first entry
      "dim" int => readstringarrayidx("reports", "${logger_rudder.expected_reports_temp}", "\s*#[^\n]*", ";;", 9999, 999999);
      "keys" slist => getindices("reports");

      "reports[${keys}][canon]" string => canonify("${reports[${keys}][1]}");

  classes:
    logger_rudder_temp_resfile_repaired::
      "keys_defined"     expression => isvariable("keys");

  files:

      # 1/ First, create the temporary file by expanding the variables
      # in it into a temporary file.
    !logger_rudder_temp_resfile_repaired::
      "${logger_rudder.expected_reports_temp}"
        create        => "true",
        edit_defaults => no_backup,
        edit_template => "${logger_rudder.expected_reports_source}",
        classes       => classes_generic("logger_rudder_temp_resfile");

      # 3/ Write the final expected reports, expanded. First, delete it, then fill it
      # (can't use edit_default empty, as we are iterating over a list)
    logger_rudder_temp_resfile_repaired.!logger_rudder_final_resfile_repaired.keys_defined::
      "${logger_rudder.expected_reports_file}"
        delete        => tidy;

      "${logger_rudder.expected_reports_file}"
        create        => "true",
        edit_defaults => no_backup,
        edit_line     => insert_lines("${reports[${keys}][0]};;${reports[${keys}][canon]};;${reports[${keys}][2]};;${reports[${keys}][3]};;${reports[${keys}][4]}"),
        classes       => classes_generic("logger_rudder_final_resfile");

}

# This bundle will delete the current expected reports file
# It is supposed to be called at the end of the run
bundle agent _clean_current_expected_reports_file {

  vars:
      "files_to_remove" slist => { "${logger_rudder.expected_reports_temp}",
                                   "${logger_rudder.expected_reports_file}" };

  files:
      "${files_to_remove}"
         delete => tidy;
      
}

# This bundle will delete expected reports files older than the given age
# It allows cleaning leftovers from interrupted executions
bundle agent _clean_old_expected_reports_file(days) {

  files:
      "${sys.workdir}/state/rudder_expected_reports\.\d+\.csv\.(tmp|res)"
        delete => tidy,
        file_select => days_old("${days}");

}

# bundle backported from rudder (prefixed with _ to avoid conflicts)
# all this whould be removed when we put this file back to rudder
# 
#
# Create and send a report to the server
# This bundle takes 6 parameters :
# technique_name : the name of the technique, human readable
# status         : the status of the Component, among the following values
#    result_success
#    result_error
#    result_repaired
#    log_repaired (for logging only)
#    log_warn     (for logging only)
#    log_info     (for logging only)
#    log_debug    (for logging only)
#    log_trace    (for logging only)
# identifier     : the identifier of the current Rule and Directive
# component_name : the name of the component within the Technique
# component_key  : the value of the component reference variable (or None if undefined)
# message        : An explanation message understandable by a human
#
bundle agent _rudder_common_report(technique_name, status, identifier, component_name, component_key, message)
{
  classes:
    changes_only::
      "send_reports" or => {
                            strcmp("${status}", "result_error") ,
                            strcmp("${status}", "result_repaired") ,
                            strcmp("${status}", "log_warn") ,
                            strcmp("${status}", "log_repaired") ,
                           };

  methods:
    # If we need to send a report, make sure we have sent the "StartRun" message first
    send_reports.!start_run_message_sent::
      "Send start message"
        usebundle => _startExecution("${identifier}"),
        action    => immediate;

  reports:
    !changes_only|send_reports::
      "@@${technique_name}@@${status}@@${identifier}@@${component_name}@@${component_key}@@${g.execRun}##${g.uuid}@#${message}";
}

#
# Automatically create reports based on existing classes starting by
# class_prefix (as defined by the body classes rudder_common_classes)
# Takes 6 parameters
# technique_name : the name of the technique, human readable
# class_prefix   : the prefix of a set of classes to reporting on (suffixes with "kept", "repaired" or "error")
# identifier     : the identifier of the current Rule and Directive
# component_name : the name of the component within the Technique
# component_key  : the value of the component reference variable (None if it does not exists)
# message_prefix : The begining of an explanation message understandable by a human
#
bundle agent _rudder_common_reports_generic(technique_name, class_prefix, identifier, component_name, component_key, message_prefix)
{
  methods:
      "na"
        usebundle  => _rudder_common_report("${technique_name}", "result_na", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was not applicable"),
        ifvarclass => "${class_prefix}_noop.!${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "success"
        usebundle  => _rudder_common_report("${technique_name}", "result_success", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was correct"),
        ifvarclass => "${class_prefix}_kept.!${class_prefix}_repaired.!${class_prefix}_error";

      "repaired"
        usebundle  => _rudder_common_report("${technique_name}", "result_repaired", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} was repaired"),
        ifvarclass => "${class_prefix}_repaired.!${class_prefix}_error";

      "error"
        usebundle  => _rudder_common_report("${technique_name}", "result_error", "${identifier}", "${component_name}", "${component_key}", "${message_prefix} could not be repaired"),
        ifvarclass => "${class_prefix}_error";
}

bundle agent _startExecution(identifier)
{
  vars:
    second_pass:: # This is necessary to work around a CFEngine bug that causes this to be defined all the time
      # Define a global class to show we have sent a "StartRun" report
      "dummy_string" string => "dummy_content",
        classes => always("start_run_message_sent");

  classes:
      # Dummy class to work around a CFEngine bug
      "second_pass" expression => "any";

  reports:
    cfengine_3::
      # Send the report and define a persistant class to store the last "heartbeat" time
      "@@Common@@log_info@@${identifier}@@common@@StartRun@@${g.execRun}##${g.uuid}@#Start execution with config [${g.rudder_node_config_id}]"
        classes => _rudder_always_classes_persist("heartbeat_sent", "${g.heartbeat_interval}");
}

#
# Always define a class, with the given persist time
# Define the class for ${persist} minutes
#
body classes _rudder_always_classes_persist(always, persist)
{
  promise_kept     => { "${always}" };
  promise_repaired => { "${always}" };
  repair_failed    => { "${always}" };
  repair_denied    => { "${always}" };
  repair_timeout   => { "${always}" };

  persist_time     => "${persist}";
}

#
# Define the current Technique we are doing report on
# Must be called before the reporting
bundle agent current_technique_report_info(name) {
  vars:
    "technique_name" string => "${name}";
}

