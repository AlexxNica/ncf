#####################################################################################
# Copyright 2016 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Package state
# @agent_version >=3.7
# @description Enforce the state of a package
# @documentation See package_present and package_absent for documentation.
# @parameter name Name of the package, or path to a local package if state is present
# @parameter version Version of the package, can be "latest" for latest version or "any" for any version (defaults to "any")
# @parameter architecture Architecture of the package, can be an architecture name  or "default" (defaults to "default")
# @parameter provider Package provider to use, can be "yum", "apt", "zypper", "pkg" or "default" for system default package manager (defaults to "default")
# 
# @class_prefix package_${state}
# @class_parameter name

bundle agent _package_state(name, version, architecture, provider, state)
{

  vars:
      "canonified_name"  string => canonify("${name}");
      "old_class_prefix" string => "package_${state}_${canonified_name}";
      "promisers"        slist  => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
      "class_prefix"     string => canonify(join("_", "promisers"));
      "args"             slist  => { "${name}", "${version}", "${architecture}", "${provider}", "${state}" };

    # Build string vars used for reporting

    # State
    state_present::
      "state_description" string => "Presence";
    !state_present::
      "state_description" string => "Absence";

    # Architecture
    architecture_specified::
      "architecture_description" string => " for ${architecture} architecture ";
    !architecture_specified::
      "architecture_description" string => " ";

    # Version
    version_latest::
      "version_description" string => "in latest available version";
    !version_specified::
      "version_description" string => "in any version";
    version_specified.!version_latest::
      "version_description" string => "in version ${version}";

  defaults:
      "version"      string => "any", if_match_regex => "";
      "architecture" string => "default", if_match_regex => "";
      "provider"     string => "default", if_match_regex => "";
      # Select the default packager for this platform if "default"
      "provider"     string => "${package_module_knowledge.platform_default}", if_match_regex => "default";

  classes:
      "version_latest"  expression => strcmp("latest", "${version}");
      # As "latest" is understood by package promises,
      # the only special case is "any", which maps to
      # no specified version in the promise
      "version_specified"      not => strcmp("any", "${version}");

      "state_present" expression => strcmp("present", "${state}");

      # If architecture is not specified, do not add it to the promise.
      # The package module will pick the default one for the local platform
      "architecture_specified" not => strcmp("default", "${architecture}");

      # Select the right package manager
      # The default one has already been selected if needed using mackage_module_knowledge
      "use_apt_provider" expression => strcmp("apt", "${provider}");
      "use_yum_provider" expression => strcmp("yum", "${provider}");
      "use_zypper_provider" expression => strcmp("zypper", "${provider}");
      "use_pkg_provider" expression => strcmp("pkg", "${provider}");
      # Used in tests
      "use_test_provider" expression => strcmp("test", "${provider}");

    any::
      "supported_provider" expression => "use_apt_provider|use_yum_provider|use_zypper_provider|use_pkg_provider|use_test_provider";
    

  packages:

    # Unfortunately, we have to duplicate the 4 cases for each supported package module

    #### apt ####

    use_apt_provider.architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => apt_get,
          architecture   => "${architecture}",
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_apt_provider.architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => apt_get,
          architecture   => "${architecture}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_apt_provider.!architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => apt_get,
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_apt_provider.!architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => apt_get,
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    #### yum ####

    use_yum_provider.architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => yum,
          architecture   => "${architecture}",
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_yum_provider.architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => yum,
          architecture   => "${architecture}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_yum_provider.!architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => yum,
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_yum_provider.!architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => yum,
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    #### zypper ####

    use_zypper_provider.architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => zypper,
          architecture   => "${architecture}",
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_zypper_provider.architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => zypper,
          architecture   => "${architecture}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_zypper_provider.!architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => zypper,
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_zypper_provider.!architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => zypper,
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    #### pkg ####

    use_pkg_provider.architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => pkg,
          architecture   => "${architecture}",
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_pkg_provider.architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => pkg,
          architecture   => "${architecture}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_pkg_provider.!architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => pkg,
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_pkg_provider.!architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => pkg,
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    #### test ####

    use_test_provider.architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => test,
          architecture   => "${architecture}",
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_test_provider.architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => test,
          architecture   => "${architecture}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_test_provider.!architecture_specified.version_specified::
      "${name}"
          policy         => "${state}",
          package_module => test,
          version        => "${version}",
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    use_test_provider.!architecture_specified.!version_specified::
      "${name}"
          policy         => "${state}",
          package_module => test,
          classes        => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:

    supported_provider::
      "reports" usebundle => _log("${state_description} of package ${name}${architecture_description}${version_description}", "${old_class_prefix}", "${class_prefix}", @{args});

    !supported_provider::
      "force failure class" usebundle => _classes_failure("${class_prefix}");
      "force failure class" usebundle => _classes_failure("${old_class_prefix}");
      "report failure"      usebundle => _log("Presence of package ${name} - package managers other than yum, apt and pkg are not currently supported", "${old_class_prefix}", "${class_prefix}", @{args});

}
