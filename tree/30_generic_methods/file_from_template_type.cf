#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from template with type
# @description This is a bundle to build a file from a template
# @agent_version >=3.6
#
# @parameter source_template Source file containing a template to be expanded
# @parameter destination     Destination file
# @parameter template_type   Template type (cfengine, jinja2 or mustache)
#
# @class_prefix file_from_template
# @class_parameter destination

bundle agent file_from_template_type(source_template, destination, template_type)
{
  vars:
    "old_class_prefix" string => canonify("file_from_template_${destination}");
    "promisers"          slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
    "class_prefix"      string => canonify(join("_", "promisers"));
    "args"              slist => { "${source_template}", "${destination}", "${template_type}" };

  classes:
    "template_exists" expression => fileexists("${source_template}");
    "is_jinja2"       expression => strcmp("${template_type}", "jinja2");

  files:
    "${destination}"
      create          => "true",
      edit_template   => "${source_template}",
      template_method => "${template_type}",
      edit_defaults   => ncf_empty_select("true"),
      ifvarclass      => "!is_jinja2.template_exists",
      classes         => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
    is_jinja2.template_exists::
      "template" usebundle => file_from_template_jinja2("${source_template}", "${destination}");

    !template_exists::
      "template_absent" usebundle => _classes_failure("${old_class_prefix}");
      "template_absent" usebundle => _classes_failure("${class_prefix}");

    is_jinja2.template_exists:
      "new result classes" usebundle => _classes_copy("${class_prefix}_file_from_template_jinja2", "${class_prefix}");
      "report" usebundle => _log("Build file ${destination} from ${template_type} template ${source_template}", "", "${class_prefix}", @{args});

    !(is_jinja2.template_exists)::
      "sanitize" usebundle => _classes_sanitize("${class_prefix}");
      "sanitize" usebundle => _classes_sanitize("${old_class_prefix}");
      "report"   usebundle => _log("Build file ${destination} from ${template_type} template ${source_template}", "${old_class_prefix}", "${class_prefix}", @{args});

}
