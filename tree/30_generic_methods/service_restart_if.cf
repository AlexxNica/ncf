#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service restart at a condition
# @description Restart a service using the appropriate method if the specified class is true, otherwise it is considered as not required and success classes are returned.
#
# @parameter service_name Service
# @parameter trigger_class class(es) which will trigger the restart of Service "(package_service_installed|service_conf_changed)" by example
# 
# @class_prefix service_restart
# @class_parameter service_name
# This bundle will define a class service_restart_${service_name}_{kept,repaired,error,ok,reached}

bundle agent service_restart_if(service_name, trigger_class)
{
  vars:

    "class_prefix"                 string     => canonify("service_restart_${service_name}");
    "canonified_service_name"      string     => canonify("${service_name}");
    "init_command"                 string     => "/etc/init.d/${service_name} restart";
    "canonified_init_command_name" string     => canonify("${init_command}");

  methods:

      # Create kept class
      "success_class"              usebundle  => _classes_success("${class_prefix}"),
                                   # parenthesis used to negate all the class
                                   ifvarclass => "!(${trigger_class})";

      #Â Will be replaced later with less naive conditions (using either service, upstart, ...
      "command_restart"            usebundle  => command_execution("${init_command}"),
                                   ifvarclass => "${trigger_class}";
      "class_copy"                 usebundle  => _classes_copy("command_execution_${canonified_init_command_name}", "${class_prefix}"),
                                   ifvarclass => "${trigger_class}";

      # reporting
      "report"                     usebundle  => _logger("Service ${canonified_service_name} restarted", "service_restart_${canonified_service_name}");
}
