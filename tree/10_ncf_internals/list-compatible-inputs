#!/bin/sh

set -e

# Need at least 3 parameters
if [ "$#" -lt 3 ]
then
  echo "Usage $0 <CFEngine_version> <ncf_framework_path> <nn_directory> [<nn_directory ...]"
  echo "  Finds all *.cf files in <ncf_framework>/<nn_directory> that are compatible with the given CFEngine version"
  exit 1
fi

cfengine_version="$1"
framework_path="$2"
# see comment below on the last parameters
shift 2

# commands
find_command=`which find`
sed_command=`which sed`
basename_command=`which basename`
grep_command=`which grep`
# commands not int path on android
[ -x "/system/xbin/find" ] && find_command="/system/xbin/find"
[ -x "/system/xbin/sed" ] && sed_command="/system/xbin/sed"
[ -x "/system/xbin/basename" ] && basename_command="/system/xbin/basename"
[ -x "/system/xbin/grep" ] && basename_command="/system/xbin/grep"
# stop if a command doesn't exist
[ ! -x "${find_command}" -o ! -x "${sed_command}" -o ! -x "${basename_command}" -o ! -x "${grep_command}" ] && echo "Posix commands not found" && exit 2

# split version numbers
version_regex='\([0-9]\+\)\.\([0-9]\+\).*'
cfengine_major=`echo -n ${cfengine_version} | ${sed_command} -e "s/${version_regex}/\\1/"`
cfengine_minor=`echo -n ${cfengine_version} | ${sed_command} -e "s/${version_regex}/\\2/"`

# Last parameters not named to keep them as a quoted array
for directory in "$@"
do
  exclude_file="${framework_path}/${directory}/.ncf-exclude-cache-${cfengine_version}"

  # ignore directory if it doesn't exist
  if [ ! -d "${framework_path}/${directory}" ]; then continue; fi

  # first remove obsolete cache for exclude list
  if [ -e "${exclude_file}" ]
  then
    newer_files=`${find_command} "${framework_path}/${directory}" -type f -newer "${exclude_file}"`
    if [ "${newer_files}" != "" ]
    then
      rm -f "${exclude_file}"
    fi
  fi

  # then create cache if it doesn't exist
  if [ -e "${exclude_file}" ]
  then
    excludes=`cat "${exclude_file}"`
  else
    # sed -ne '/regex/F' prints file name when regex matches
    tag_regex='^#[ \t]\+@agent_version[ \t]\+>='
    for file in `${find_command} "${framework_path}/${directory}" -name '*.cf' -exec ${grep_command} -l "${tag_regex}" '{}' \;`
    do
      major=`${sed_command} -ne "s/${tag_regex}${version_regex}/\\1/p" "${file}"`
      minor=`${sed_command} -ne "s/${tag_regex}${version_regex}/\\2/p" "${file}"`
      file_name=`${basename_command} ${file}`
      if [ "${major}" -gt "${cfengine_major}" ] || [ "${major}" -eq "${cfengine_major}" -a "${minor}" -gt "${cfengine_minor}" ]
      then
        # posix compliant syntax to exclude a file
        excludes="${excludes} -name ${file_name} -prune -o"
      fi

    done  
    echo -n "${excludes}" > "${exclude_file}"
  fi

  # eventually call find
  # posix compliant version of find without -printf '%p\n', it should work with darwin and aix
  ${find_command} "${framework_path}/${directory}" ${excludes} -name '*.cf' -print
done

